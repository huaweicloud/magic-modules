func asyncWait<%= sprintf("%s%s", resource_name, titlelize(api.name))%>(d *schema.ResourceData,
    config *Config, result interface{}, client *golangsdk.ServiceClient) (interface{}, error) {
<%
   async = api.async
   async_op = async.operation
-%>
<% cl = "client" -%>
<% if need_build_async_client(api) -%>
    asyncClient, err := config.sdkClient(<%= argu_for_sdkclient(async.operation) %>)
    if err != nil {
        return fmt.Errorf("Error creating async sdk client, err=%s", err)
    }
<%   cl = "asyncClient" -%>

<% end -%>
<% if need_build_async_url(api) %>
<%   if async_op.path_parameter -%>
    pathParameters := map[string][]string {
<%     async_op.path_parameter.each do |k, v| -%>
<%=      sprintf("\"%s\": []string{%s},", k, index2navigate(v))  %>
<%     end -%>
    }
    var data = make(map[string]string)
    for key, path := range pathParameters {
        value, err := navigateValue(result, path, nil)
        if err != nil {
            return fmt.Errorf("Error retrieving async operation path parameter: %s", err)
        }
        data[key] = value.(string)
    }
    url, err := replaceVars(d, "<%= async_op.path -%>", data)
    if err != nil {
        return err
    }
    url = <%= cl %>.ServiceURL(url)
<%   elsif async_op.path.include?("{") -%>
    url, err := replaceVars(d, "<%= async_op.path -%>", nil)
    if err != nil {
        return err
    }
    url = <%= cl %>.ServiceURL(url)
<%   else -%>
    url := <%= cl %>.ServiceURL(<%= sprintf("\"%s\"", async_op.path) %>)
<%   end -%>
<% end -%>

<% status_check = async.status_check -%>
<% if status_check -%>
    return waitToFinish(
        []string{<%= status_check.complete.compact.map { |x| "\"#{x}\"" }.join(", ") %>},
        []string{<%= status_check.pending.compact.map { |x| "\"#{x}\"" }.join(", ") %>, "Pending"},
        <%= timeout %>,
        <%= sprintf('%d', async.operation.wait_ms / 1000) %> * time.Second,
        func() (interface{}, string, error) {
            r := golangsdk.Result{}
            _, r.Err = <%= cl %>.Get(
                url, &r.Body,
                &golangsdk.RequestOpts{MoreHeaders: map[string]string{"Content-Type": "application/json"}})
            if r.Err != nil {
                return nil, "", nil
            }

            status, err := navigateValue(r.Body, []string{<%= index2navigate(status_check.field) %>}, nil)
            if err != nil {
                return nil, "", nil
            }
            return r.Body, status.(string), nil
        },
    )
<% elsif async.custom_status_check_func -%>
    return waitToFinish(
        []string{"Done"}, []string{"Pending"},
        <%= timeout %>,
        <%= sprintf('%d', async.operation.wait_ms / 1000) %> * time.Second,
        func() (interface{}, string, error) {
            r := golangsdk.Result{}
            _, r.Err = <%= cl %>.Get(
                url, &r.Body,
                &golangsdk.RequestOpts{MoreHeaders: map[string]string{"Content-Type": "application/json"}})
            if r.Err != nil {
                return nil, "", nil
            }

            if <%= async.custom_status_check_func %>(r.Body) {
                return r.Body, "Done", nil
            }
            return r.Body, "Pending", nil
        },
    )
<% else -%>
<%   raise "Must sepecify status check for api: #{api.name}" -%>
<% end -%>
}
