<% if false # the license inside this if block pertains to this file -%>
  # Copyright 2017 Google Inc.
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
<% end -%>
<% if property.custom_flatten -%>
<%= lines(compile_template(property.custom_flatten,
                           prefix: resource_name,
                           property: property)) -%>
<% else -%>
<%   go_on = property.from_response.nil? || property.from_response.include?('{class}(')
     postfix = property&.from_response&.include?('{class}(') ? "Internal" : ""
-%>
<%   unless property.from_response.nil? -%>
<%     internal = "flatten#{prefix}#{titlelize_property(property)}Internal" -%>

func flatten<%= prefix -%><%= titlelize_property(property) -%>(v interface{}) (interface{}, error) {
    if v == nil {
        return nil, nil
    }
    <%= lines(convert_custom_method(property, property.from_response, internal)) %>
}
<%   end -%>
<%   if go_on && tf_types.include?(property.class)
       nested_properties = nested_properties(property)
-%>
<%     unless nested_properties.nil? -%>

func flatten<%= prefix -%><%= titlelize_property(property) -%><%= postfix -%>(v interface{}) (interface{}, error) {
    if v == nil {
        return nil, nil
    }
<%       if property.is_a?(Api::Type::NestedObject) -%>
    original := v.(map[string]interface{})
    transformed := make(map[string]interface{})
<%       else -%>
    l := v.([]interface{})
    result := make([]interface{}, 0, len(l))
    for _, raw := range l {
        original := raw.(map[string]interface{})
        transformed := make(map[string]interface{})
<%       end -%>

<%       nested_properties.select {|p| p.crud.include?("r")}.each do |prop|
           k, v, f = response_property(prop, 'val', prefix + titlelize_property(property))
           v1 = "#{go_variable(prop)}Prop"
-%>
    if val, ok := original["<%= k %>"]; ok {
<%         if f -%>
        <%= v1 %>, err := <%= v %>
        if err != nil {
            return nil, fmt.Errorf("Error reading <%= property.out_name -%>:<%= prop.out_name %>, err: %s", err)
        }
	transformed["<%= prop.out_name %>"] = <%= v1 %>
<%         else -%>
	transformed["<%= prop.out_name %>"] = <%= v %>
<%         end -%>
    }

<%       end -%>
<%       if property.is_a?(Api::Type::NestedObject) -%>
    return []interface{}{transformed}, nil
<%       else -%>
	result = append(result, transformed)
    }

    return result, nil
<%       end -%>
}
<%       nested_properties.select {|p| p.crud.include?("r")}.each do |prop| -%>
    <%= lines(build_flatten_method(prefix + titlelize_property(property), prop), 1) -%>
<%       end -%>
<%     end # nested_properties.nil? -%>
<%   else -%>
    // TODO: Property '<%= property.name -%>' of type <%= property.class -%> is not supported
<%   end # tf_types.include?(property.class) -%>
<% end # custom code check -%>
