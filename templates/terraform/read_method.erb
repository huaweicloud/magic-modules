func read<%= resource_name %><%= titlelize(api.name) %>(d *schema.ResourceData, client *golangsdk.ServiceClient, result map[string]interface{}) error {
<% if api.path.include?("{") -%>
    url, err := replaceVars(d, "<%= api.path -%>", nil)
    if err != nil {
        return err
    }
    url = client.ServiceURL(url)
<% else -%>
    url := client.ServiceURL(<%= sprintf("\"%s\"", api.path) %>)
<% end -%>

    r := golangsdk.Result{}
    _, r.Err = client.<%= api.verb.capitalize %>(
        url, &r.Body,
        &golangsdk.RequestOpts{MoreHeaders: map[string]string{"Content-Type": "application/json"}})
    if r.Err != nil {
        return fmt.Errorf("Error running api(<%= api.name %>) for resource(<%= resource_name%>: %v), error: %s", d.Id(), r.Err)
    }

<% if api.msg_prefix.nil? -%>
    result["<%= api.out_name %>"] = r.Body
<% else -%>
<%   ai = "nil" -%>
<%   unless api.msg_prefix_array_items.nil? -%>
<%   ai = "arrayIndex" -%>
    arrayIndex = map[string]int {
<%     api.msg_prefix_array_items.each do |i| -%>
	"<%= i %>": 0,
<%     end -%>
    }
<%   end -%>
    v, err := navigateValue(r.Body, []string{<%= index2navigate(api.msg_prefix) %>}, <%= ai %>)
    if err != nil {
            return err
    }
    result["<%= api.out_name %>"] = v
<% end -%>

    return nil
}
