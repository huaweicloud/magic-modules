<% if false # the license inside this if block pertains to this file -%>
  # Copyright 2017 Google Inc.
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #     http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.
<% end -%>
<% unless property.to_request.nil? -%>
func expand<%= prefix -%><%= titlelize(property.name) -%>(d interface{}, arrayIndex map[string]int) (interface{}, error) {
<%   f = property.to_request
     set_property_value(property, "to_request", nil)
     prefix = prefix + "Custom"
-%>
    v, err := <%= convert_parameter(property, "d, arrayIndex", prefix) %>
    if err != nil {
        return nil, err
    }
    <%= lines(f) -%>
}
<% end -%>
<% nested_properties = nested_properties(property) -%>
<% if property.is_a?(Api::Type::Array) && property.item_type.is_a?(Api::Type::NestedObject) -%>
func expand<%= prefix -%><%= titlelize(property.name) -%>(d interface{}, arrayIndex map[string]int) (interface{}, error) {
    newArrayIndex := make(map[string]int)
    if arrayIndex != nil {
        for k, v := range arrayIndex {
            newArrayIndex[k] = v
	}
    }
<%   ra = nestedobject_index(resource, property.field) -%>
<%   ra.each do |k, v| -%>
    newArrayIndex[<%= k %>] = <%= v %>
<%   end -%>

    v, err := navigateValue(d, []string{<%= index2navigate(property.field, true) %>}, newArrayIndex)
    if err != nil {
        return nil, err
    }

    n := len(v.([]interface{}))
    req := make([]interface{}, 0, n)
    for i := 0; i < n; i++ {
        newArrayIndex["<%= to_schema_name(property.field.split(".")[-1]) %>"] = i
        transformed := make(map[string]interface{})

        <%= lines(build_expand_properties(resource, nested_properties, op, "d, newArrayIndex", prefix + titlelize(property.name), "transformed", true), 1) -%>
        req = append(req, transformed)
    }

    return req, nil
}
<% elsif property.is_a?(Api::Type::NestedObject) -%>
func expand<%= prefix -%><%= titlelize(property.name) -%>(d interface{}, arrayIndex map[string]int) (interface{}, error) {
    req := make(map[string]interface{})

    <%= lines(build_expand_properties(resource, nested_properties, op, "d, arrayIndex", prefix + titlelize(property.name), "req", true), 1) -%>
    return req, nil
}
<% end # if property.is_a?(Api::Type::Array) -%>
<% unless nested_properties.nil? -%>
<%   nested_properties.each do |prop| -%>

<%= lines(build_expand_method(resource, op, prefix + titlelize(property.name), prop), 1) -%>
<%   end -%>
<% end -%>
