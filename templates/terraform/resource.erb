<% if false # the license inside this if block pertains to this file -%>
# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
<% end -%>
<%= lines(autogen_notice :go) -%>

package <%= package %>

<%= lines(compile(object.custom_code.constants)) if object.custom_code.constants %>

<%
  resource_name = product_ns + object.name + object.version.upcase
  resource_nestedobj_properties = nestedobject_properties(object)
  ai_name = resource_nestedobj_properties.nil? ? "nil" : "arrayIndex"
-%>

func resource<%= resource_name -%>() *schema.Resource {
    return &schema.Resource{
        Create: resource<%= resource_name -%>Create,
        Read: resource<%= resource_name -%>Read,
        <% if updatable?(object) -%>
        Update: resource<%= resource_name -%>Update,
        <% end -%>
        Delete: resource<%= resource_name -%>Delete,

        Importer: &schema.ResourceImporter{
            State: schema.ImportStatePassthrough,
        },
        <% at = async_timout(object) %>
        <% unless at.empty? -%>
        Timeouts: &schema.ResourceTimeout {
            <% unless at["create"].nil? -%>
            Create: schema.DefaultTimeout(<%= sprintf('%d',  at["create"] / 60) -%> * time.Minute),
            <% end -%>
            <% unless at["update"].nil? -%>
            Update: schema.DefaultTimeout(<%= sprintf('%d',  at["update"] / 60) -%> * time.Minute),
            <% end -%>
            <% unless at["delete"].nil? -%>
            Delete: schema.DefaultTimeout(<%= sprintf('%d',  at["delete"] / 60) -%> * time.Minute),
            <% end -%>
        },
        <% end -%>

        Schema: map[string]*schema.Schema{
<% order_properties(object.all_user_properties).each do |prop| -%>
    <%= lines(build_schema_property(prop, object)) -%>

<% end -%>
        },
    }
}

func resource<%= resource_name -%>UserInputParams(d *schema.ResourceData) map[string]interface{} {
    return map[string]interface{}{
        "terraform_resource_data": d,
<% object.not_output_properties.sort_by(&:out_name).each do |prop| -%>
        "<%= prop.out_name %>": d.Get("<%= prop.out_name %>"),
<% end -%>
    }
}

<% create_api = object.apis["create"] -%>
func resource<%= resource_name -%>Create(d *schema.ResourceData, meta interface{}) error {
    config := meta.(*Config)
    client, err := config.sdkClient(<%= argu_for_sdkclient(create_api) %>)
    if err != nil {
        return fmt.Errorf("Error creating sdk client, err=%s", err)
    }

    opts := resource<%= resource_name -%>UserInputParams(d)
<% unless resource_nestedobj_properties.nil? -%>

    arrayIndex := map[string]int{
<%   resource_nestedobj_properties.each do |i| -%>
        "<%= to_schema_index(i) %>": 0,
<%   end -%>
    }
<% end -%>

    r, err := send<%= resource_name -%>CreateRequest(d, opts, <%= ai_name -%>, client)
    if err != nil {
        return fmt.Errorf("Error creating <%= resource_name -%>: %s", err)
    }
<% action = action_after_send_create_request(object) -%>
<% unless action.nil? -%>

    err = action<%= resource_name %><%= titlelize(action.name) %>(d, r, client)
    if err != nil {
        return err
    }
<% end -%>
<% if create_api.async.nil? -%>

    id, err := navigateValue(r, []string{<%= index2navigate(create_api.resource_id_path) %>}, nil)
    if err != nil {
        return fmt.Errorf("Error constructing id: %s", err)
    }
    d.SetId(id.(string))
<% else -%>

    obj, err := asyncWait<%= resource_name %><%= titlelize(create_api.name) %>(d, config, r, client)
    if err != nil {
        return err
    }
    id, err := navigateValue(obj, []string{<%= index2navigate(create_api.async.result.field) %>}, nil)
    if err != nil {
        return fmt.Errorf("Error constructing id: %s", err)
    }
    d.SetId(id.(string))
<% end # unless object.async -%>
<% other_api(object, "c").each do | item | -%>
<%   stage = item.crud.include?("u") ? "Create": "" -%>
<%   r = item.async.nil? ? "_, err =" : "v, err :=" -%>

    <%= r %> send<%= stage %><%= resource_name %><%= titlelize(item.name) %>Request(d, opts, <%= ai_name %>, client)
    if err != nil {
        return err
    }
<%   unless item.async.nil? -%>
    _, err = asyncWait<%= resource_name %><%= titlelize(item.name) %>(d, config, v, client)
    if err != nil {
        return err
    }
<%   end -%>
<% end -%>

    return resource<%= resource_name -%>Read(d, meta)
}

<%- read_api = object.apis["read"] %>
func resource<%= resource_name -%>Read(d *schema.ResourceData, meta interface{}) error {
    config := meta.(*Config)
    client, err := config.sdkClient(<%= argu_for_sdkclient(create_api) %>)
    if err != nil {
        return fmt.Errorf("Error creating sdk client, err=%s", err)
    }

    res := make(map[string]interface{})
<% read_apis = [read_api, other_api(object, "r")].flatten.compact -%>
<% read_apis.each do | item | -%>

    err = read<%= resource_name %><%= titlelize(item.name) %>(d, client, res)
    if err != nil {
        return err
    }
<% end -%>

    return set<%= resource_name -%>Properties(d, res)
}
<% if updatable?(object) -%>

func resource<%= resource_name -%>Update(d *schema.ResourceData, meta interface{}) error {
    config := meta.(*Config)
    client, err := config.sdkClient(<%= argu_for_sdkclient(create_api) %>)
    if err != nil {
        return fmt.Errorf("Error creating sdk client, err=%s", err)
    }

    opts := resource<%= resource_name -%>UserInputParams(d)
<% unless resource_nestedobj_properties.nil? -%>

    arrayIndex := map[string]int{
<%   resource_nestedobj_properties.each do |i| -%>
        "<%= to_schema_index(i) %>": 0,
<%   end -%>
    }
<% end -%>
<%   update_api = object.apis.fetch("update", nil) -%>
<%   unless update_api.nil? -%>
<%     r = update_api.async.nil? ? "_, err =" : "r, err :=" -%>

    <%= r %> send<%= resource_name -%>UpdateRequest(d, opts, <%= ai_name -%>, client)
    if err != nil {
        return fmt.Errorf("Error updating (<%= resource_name -%>: %v): %s", d.Id(), err)
    }
<%     unless update_api.async.nil? -%>

    _, err = asyncWait<%= resource_name %><%= titlelize(update_api.name) %>(d, config, r, client)
    if err != nil {
        return err
    }
<%     end # unless object.async -%>
<%   end # update_api.nil -%>
<%   other_api(object, "u").each do | item | -%>
<%     stage = item.crud.include?("c") ? "Update" : "" -%>
<%     r = item.async.nil? ? "_, err =" : "v, err :=" -%>

    <%= r %> send<%= stage %><%= resource_name %><%= titlelize(item.name) %>Request(d, opts, <%= ai_name%>, client)
    if err != nil {
        return err
    }
<%   unless item.async.nil? -%>
    _, err = asyncWait<%= resource_name %><%= titlelize(item.name) %>(d, config, v, client)
    if err != nil {
        return err
    }
<%   end -%>
<%   end -%>

    return resource<%= resource_name -%>Read(d, meta)
}
<% end -%>

func resource<%= resource_name -%>Delete(d *schema.ResourceData, meta interface{}) error {
    config := meta.(*Config)
    client, err := config.sdkClient(<%= argu_for_sdkclient(create_api) %>)
    if err != nil {
        return fmt.Errorf("Error creating sdk client, err=%s", err)
    }

<% delete_api = object.apis["delete"] -%>
    url, err := replaceVars(d, "<%= delete_api.path -%>", nil)
    if err != nil {
        return err
    }
    url = client.ServiceURL(url)

<% unless delete_api.parameters.nil? -%>
    opts := resource<%= resource_name -%>UserInputParams(d)
<%   unless resource_nestedobj_properties.nil? -%>
    arrayIndex := map[string]int{
<%     resource_nestedobj_properties.each do |i| -%>
        "<%= to_schema_index(i) %>": 0,
<%     end -%>
    }

<%   end -%>
    params, err := build<%= resource_name -%>DeleteParameters(opts, arrayIndex)
    if err != nil {
        return nil, fmt.Errorf("Error building the request body of api(delete)")
    }

<% end -%>
    log.Printf("[DEBUG] Deleting <%= object.name -%> %q", d.Id())
    r := golangsdk.Result{}
    _, r.Err = client.Delete(url, &golangsdk.RequestOpts{
        OkCodes: successHTTPCodes,
        JSONBody: <%= delete_api.parameters.nil? ? "nil" : "params" %>,
        JSONResponse: &r.Body,
        MoreHeaders:  map[string]string{"Content-Type": "application/json"},
    })
    if r.Err != nil {
        return fmt.Errorf("Error deleting <%= object.name -%> %q: %s", d.Id(), r.Err)
    }

<% if delete_api.async.nil? -%>
<%   if create_api.async.nil? -%>
    return nil
<%   else # if create api is async, then it is best to make sure the resource is delete successfully -%>
<%     unless delete_api.path.eql?(read_api.path) -%>
    url, err = replaceVars(d, "<%= read_api.path -%>", nil)
    if err != nil {
        return err
    }
    url = client.ServiceURL(url)

<%     end -%>
    _, err = waitToFinish(
        []string{"Done"}, []string{"Pending"},
        d.Timeout(schema.TimeoutCreate),
        <%= sprintf('%d', create_api.async.operation.wait_ms / 1000) %> * time.Second,
        func() (interface{}, string, error) {
            resp, err := client.Get(
                url, nil,
                &golangsdk.RequestOpts{MoreHeaders: map[string]string{"Content-Type": "application/json"}})
            if err != nil {
                if _, ok := err.(golangsdk.ErrDefault404); ok{
                    return resp, "Done", nil
                }
                return nil, "", nil
            }
            return resp, "Pending", nil
        },
    )
    return err
<%   end # unless is_resource_standard_async -%>
<% else -%>
    _, err = asyncWait<%= resource_name %><%= titlelize(delete_api.name) %>(d, config, r.Body, client)
    return err
<% end -%>
}
<% create_apis = [create_api, other_api(object, "c")].flatten.compact -%>
<% create_apis.each do | item | -%>
<%   stage = item.is_a?(Api::ApiOther) && item.crud.include?("u") ? "Create" : "" -%>

<%= lines(build_send_request_method(stage, resource_name, item), 1) -%>
<%   unless item.parameters.nil? -%>

<%= lines(build_request_body_method(object, stage, resource_name, item), 1) -%>
<%   end -%>
<%   unless item.async.nil? -%>

    <%= lines(build_resource_async_op(item, "d.Timeout(schema.TimeoutCreate)", resource_name), 1) %>
<%   end -%>
<% end -%>
<% if updatable?(object) -%>
<%   update_apis = [update_api, other_api(object, "u")].flatten.compact -%>
<%   update_apis.each do | item | -%>
<%     stage = item.is_a?(Api::ApiOther) && item.crud.include?("c") ? "Update" : "" -%>

<%= lines(build_send_request_method(stage, resource_name, item), 1) -%>
<%     unless item.parameters.nil? -%>

<%= lines(build_request_body_method(object, stage, resource_name, item), 1) -%>
<%     end -%>
<%     unless item.async.nil? -%>

    <%= lines(build_resource_async_op(item, "d.Timeout(schema.TimeoutUpdate)", resource_name), 1) %>
<%     end -%>
<%   end -%>
<% end -%>
<% unless delete_api.parameters.nil? -%>

<%= lines(build_request_body_method(object, "", resource_name, delete_api), 1) -%>
<% end -%>
<% unless delete_api.async.nil? -%>

    <%= lines(build_resource_async_op(delete_api, "d.Timeout(schema.TimeoutDelete)", resource_name), 1) %>
<% end -%>
<% read_apis.each do | item | -%>

<%= lines(build_read_method(resource_name, item), 1) -%>
<% end -%>

<%= lines(build_set_properties_method(object, resource_name), 1) -%>
<% action = action_after_send_create_request(object) -%>
<% if action -%>

<%= lines(build_action_method(object, resource_name, action), 1) -%>
<% end -%>
