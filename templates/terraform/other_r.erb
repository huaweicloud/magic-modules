func read<%= resource_name %><%= titlelize(api.name) %>(d *schema.ResourceData, client *golangsdk.ServiceClient, result map[string]interface{}) error {
<% url_v = "url" -%>
<% if api.path.include?("{") -%>
    url, err = replaceVars(d, "<%= api.path -%>", nil)
    if err != nil {
        return err
    }
<% else -%>
<%   url_v = sprintf("\"%s\"", api.path) -%>
<% end -%>
    url = client.ServiceURL(<%= url_v %>)

    r := golangsdk.Result{}
    _, r.Err = client.<%= api.verb.capitalize %>(
        url, &r.Body,
        &golangsdk.RequestOpts{MoreHeaders: map[string]string{"Content-Type": "application/json"}})
    if r.Err != nil {
        return fmt.Errorf("Error run <%= api.name %> for resource(%s): %s", fmt.Sprintf("<%= resource_name -%> %q", d.Id()), r.Err)
    }

    res, ok := r.Body.(map[string]interface{})
    if !ok {
        return fmt.Errorf("Error run <%= api.name %> for resource(%s): the result is not map", fmt.Sprintf("<%= resource_name -%> %q", d.Id()))
    }

    for k, v := range res {
        result[k] = v
    }
    return nil
}
