<%
   async = object.async.fetch(op.downcase, nil)
   async_op = async.operation
   cl = "client"
-%>
<% unless op.eql?("Delete") && !is_resource_standard_async(object, async) -%>
<%   if async_op.path -%>
    pathParameters := map[string][]string {
<%     async_op.path.each do |k, v| -%>
<%=     sprintf("\"%s\": []string{%s},", k, path2navigate(v))  %>
<%     end -%>
    }
    var data = make(map[string]string)
    for key, path := range pathParameters {
        value, err := navigateMap(r.Body, path)
        if err != nil {
            return fmt.Errorf("Error retrieving async operation path parameter: %s", err)
        }
	data[key] = value.(string)
    }
    url, err = replaceVars(d, "<%= async_operation_url(async) -%>", data)
    if err != nil {
        return err
    }
<%   end -%>
<% end -%>
<% if is_resource_standard_async(object, async) -%>
<%   async_st = async.operation.service_type -%>
<%   if async_st && async_st != object.service_type -%>

    asyncClient, err := config.sdkClient(GetRegion(d, config), "<%= async_st %>")
    if err != nil {
        return fmt.Errorf("Error creating sdk client(\"<%= async_st %>\"), err=%s", err)
    }
<%     cl = "asyncClient" -%>
<%   end -%>
    url = <%= cl %>.ServiceURL(url)

    <%= lines(build_async_wait_method(
            async, async.status,
            op.eql?("Create") ? "obj" : "_",
            "d.Timeout(schema.Timeout#{op})", cl), 1) %>
<% else # if not is_standard_async -%>
<%   unless op.eql?("Delete") -%>
    url = <%= cl %>.ServiceURL(url)

<%     if async.status.custom_function.nil? -%>
    <%= lines(build_async_wait_method(
            async, op.eql?("Update") ? async.update_status || async.status : async.status,
            op.eql?("Create") ? "obj" : "_",
            "d.Timeout(schema.Timeout#{op})", cl), 1) %>
<%     else -%>
    <%= lines(build_async_wait_method(
            async, async.status.custom_function,
            op.eql?("Create") ? "obj" : "_",
            "d.Timeout(schema.Timeout#{op})", cl), 1) %>
<%     end # if async.status.allowed -%>
<%   end # unless op.eql?("Delete") -%>
<% end # if is_resource_standard_async -%>
