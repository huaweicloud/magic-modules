<%
   async = object.async
   cl = "client"
   unless op.eql?("Delete") && !is_resource_standard_async(object)
-%>
    opID, err := navigateMap(r.Body, []string{<%= path2navigate(async.operation.path) %>})
    if err != nil {
        return fmt.Errorf("Error retrieving async operation id: %s", err)
    }
    url, err = replaceVars(d, "<%= async_operation_url(async) -%>",
                            map[string]string{"op_id": opID.(string)})
    if err != nil {
        return err
    }
<% end -%>
<% if is_resource_standard_async(object) -%>
<%   async_st = async.operation.service_type -%>
<%   if async_st && async_st != object.service_type -%>

    asyncClient, err := config.sdkClient(GetRegion(d, config), "<%= async_st %>")
    if err != nil {
        return fmt.Errorf("Error creating sdk client(\"<%= async_st %>\"), err=%s", err)
    }
<%     cl = "asyncClient" -%>
<%   end -%>
    url = <%= cl %>.ServiceURL(url)

    <%= lines(build_async_wait_method(
	    async, async.status,
	    op.eql?("Create") ? "obj" : "_",
	    "d.Timeout(schema.Timeout#{op})", cl), 1) %>
<% else # if not is_standard_async -%>
<%   unless op.eql?("Delete") -%>
    url = <%= cl %>.ServiceURL(url)

<%     if custom_complete_method.nil? -%>
    <%= lines(build_async_wait_method(
	    async, op.eql?("Update") ? async.update_status || async.status : async.status,
	    op.eql?("Create") ? "obj" : "_",
	    "d.Timeout(schema.Timeout#{op})", cl), 1) %>
<%     else -%>
    <%= lines(build_async_wait_method(
	    async, custom_complete_method,
	    op.eql?("Create") ? "obj" : "_",
	    "d.Timeout(schema.Timeout#{op})", cl), 1) %>
<%     end # if async.status.allowed -%>
<%   end # unless op.eql?("Delete") -%>
<% end # if is_resource_standard_async -%>
