<%
   new_prefix = sprintf("%s_%s", prefix, property.out_name)
   func_def = sprintf("expand_%s(d, array_index):", new_prefix)
   nested_properties = nested_properties(property)
-%>
<% if property.is_a?(Api::Type::Array) && property.item_type.is_a?(Api::Type::NestedObject) -%>
<%   rp = find_property(resource, property.field.split(".")) -%>
<%   unless rp.is_a?(Api::Type::Array) -%>
<%     raise "parameter(#{property.name}) is an array, but the matched property is not"-%>
<%   end -%>
def <%= func_def -%>
    new_array_index = copy.deepcopy(array_index) if array_index else dict()

    v = navigate_value(d, [<%= index2navigate(property.field, true) %>],
                       new_array_index)

    req = []
    for i in range(len(v)):
        new_array_index["<%= to_schema_index(property.field) %>"] = i
        <%= lines(build_expand_properties(resource, nested_properties, op, "d, new_array_index", new_prefix, "transformed", true), 1) -%>
        req.append(transformed)

    return req
<% elsif property.is_a?(Api::Type::NestedObject) -%>
def <%= func_def -%>
    <%= lines(build_expand_properties(resource, nested_properties, op, "d, array_index", new_prefix, "req", true), 1) -%>
    return req
<% end # if property.is_a?(Api::Type::Array) -%>
<% unless nested_properties.nil? -%>
<%   nested_properties.each do |prop| -%>

<%= lines(build_expand_method_normal(resource, op, new_prefix, prop), 1) -%>
<%   end -%>
<% end -%>
