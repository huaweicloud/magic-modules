#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2018 Huawei
# GNU General Public License v3.0+ (see COPYING or
# https://www.gnu.org/licenses/gpl-3.0.txt)
<%= lines(autogen_notice :python) -%>

from __future__ import absolute_import, division, print_function
__metaclass__ = type

###############################################################################
# Documentation
###############################################################################

<%
  metadata_version = quote_string(@config.manifest.get('metadata_version',
                                                       config))
  supported_by = quote_string(@config.manifest.get('supported_by', config))
-%>
ANSIBLE_METADATA = {'metadata_version': <%= metadata_version -%>,
                    'status': <%= @config.manifest.get('status', config) -%>,
                    'supported_by': <%= supported_by -%>}

DOCUMENTATION = '''
---
module: <%= module_name(object) %>
description:
<%= lines(indent(bullet_lines(object.description, 4), 4)) -%>
short_description: Creates a resource of <%= product_name.capitalize %>/<%= object.name %> in <%= cloud_name %>
version_added: <%= lines(@config.manifest.get('version_added', config)) -%>
author: <%= lines(@config.manifest.get('author', config)) -%>
requirements:
<% @config.manifest.get('requirements', config).each do |line| -%>
<%= lines(indent(bullet_line(line, 4, false, false), 4)) -%>
<% end -%>
options:
    state:
        description:
            - Whether the given object should exist in <%= cloud_name %>.
        choices: ['present', 'absent']
        default: 'present'
<% object.not_output_properties.each do |prop| -%>
<%= lines(indent(doc_property_yaml(prop, object, 4), 4)) -%>
<% end -%>
extends_documentation_fragment: hwc
'''

<%if example -%>
EXAMPLES = '''
<%#<% res_readable_name = Google::StringUtils.uncombine(object.name) -%>
<% if example.dependencies -%>
<%   example.dependencies.each do |depend| -%>
<%= lines(depend.build_test('present', object, false)) -%>
<%   end # example.dependencies.each -%>
<% end # if example.dependencies -%>
<%= lines(example.task.build_example('present', object)) -%>
'''

<% end -%>
RETURN = '''
<% object.all_user_properties.each do |prop| -%>
<%= lines(indent(return_property_yaml(prop, 4), 4)) -%>
<% end -%>
'''

###############################################################################
# Imports
###############################################################################

from ansible.module_utils.hwc_utils import (HwcSession, HwcModule,
                                            DictComparison, navigate_value,
                                            get_region,
                                            HwcClientException,
                                            HwcClientException404)
<%
  imports = ['json']
  imports << 're'
-%>
<%= lines(imports.sort.uniq.map { |i| "import #{i}" }) -%>

###############################################################################
# Main
###############################################################################


def main():
    """Main function"""

<%
  mod_props = object.not_output_properties.map do |prop|
    python_dict_for_property(prop, object)
  end
-%>
    module = HwcModule(
        argument_spec=dict(
            state=dict(default='present', choices=['present', 'absent'],
                       type='str'),
<%= lines(indent_list(mod_props, 12)) -%>
        )
    )

    config = Config(module, "<%= object.__product.prefix[1..-1] %>")
<% list_api = object.apis.fetch("list", nil)
   raise "no list api" if list_api.nil?
-%>
    resource = fetch_resource(config)
    if resource:
        module.params['id'] = navigate_value(
            resource, [<%= index2navigate(list_api.resource_id_path) %>])

    result = {}
    changed = False
    if module.params['state'] == 'present':
        if resource is None:
            result = create(config)
            changed = True

        else:
<% unless updatable?(object) -%>
            result = read_resource(config)
<% else -%>
            current = read_resource(config, exclude_output=True)
            expect = user_input_parameters(module)
            if DictComparison(expect) != DictComparison(current):
                result = update(config)
                changed = True
            else:
                result = read_resource(config)
<% end # updateable(object)? -%>
    else:
        if resource:
            delete(config)
            changed = True

    result['changed'] = changed
    module.exit_json(**result)


def user_input_parameters(module):
    return {
<% object.not_output_properties.each do |prop| -%>
        "<%= prop.out_name %>": module.params.get("<%= prop.out_name %>"),
<% end -%>
    }

<% at = async_timout(object) %>
<% create_api = object.apis["create"] -%>
def create(config):
    module = config.module
    client = config.client(<%= argu_for_sdkclient(create_api) %>)
<% unless at["create"].nil? -%>
    timeout = 60 * int(module.params['timeouts']['create'].rstrip('m'))
<% end -%>
    opts = user_input_parameters(module)

    params = build_create_parameters(opts)
    r = send_create_request(module, params, client)
<% if create_api.async.nil? -%>
    module.params['id'] = navigate_value(r, [<%= index2navigate(create_api.resource_id_path ) %>])
<% else -%>
    obj = async_wait_create(config, r, client, timeout)
    module.params['id'] = navigate_value(obj, [<%= index2navigate(create_api.async.result.field) %>])
<% end -%>
<% other_api(object, "c").each do | item | -%>
<% 
     r = item.async.nil? ? "" : "r = "
     spaces = item.parameters.nil? ? "" : "    "
-%>

<%   unless item.parameters.nil? -%>
    params = build_<%= item.out_name %>_parameters(opts)
    if params:
<%   end -%>
    <%= spaces %><%= r %>send_<%= item.out_name %>_request(module, <%= item.parameters.nil? ? "None" : "params" %>, client)
<%   unless item.async.nil? -%>
    <%= spaces %>async_wait<%= item.out_name %>(config, r, client, timeout)
<%   end -%>
<% end -%>

    return read_resource(config)
<% if updatable?(object) -%>


def update(config):
    module = config.module
    client = config.client(<%= argu_for_sdkclient(create_api) %>)
<%   unless at["update"].nil? -%>
    timeout = 60 * int(module.params['timeouts']['update'].rstrip('m'))
<%   end -%>
    opts = user_input_parameters(module)
<%   update_api = object.apis.fetch("update", nil) -%>
<%   unless update_api.nil? -%>
<%     r = update_api.async.nil? ? "" : "r = " -%>

    params = build_update_parameters(opts)
    if params:
        <%= r %>send_update_request(module, params, client)
<%     unless update_api.async.nil? -%>
        async_wait_update(config, r, client, timeout)
<%     end -%>
<%   end # update_api.nil? -%>
<%   other_api(object, "u").each do | item | -%>
<% 
       r = item.async.nil? ? "" : "r = "
       spaces = item.parameters.nil? ? "" : "    "
-%>

<%     unless item.parameters.nil? -%>
    params = build_<%= item.out_name %>_parameters(opts)
    if params:
<%     end -%>
    <%= spaces %><%= r %>send_<%= item.out_name %>_request(module, <%= item.parameters.nil? ? "None" : "params" %>, client)
<%     unless item.async.nil? -%>
    <%= spaces %>async_wait<%= item.out_name %>(config, r, client, timeout)
<%     end -%>
<%   end -%>

    return read_resource(config)
<% end # updatable? -%>


def delete(config):
    module = config.module
    client = config.client(<%= argu_for_sdkclient(create_api) %>)
<% unless at["delete"].nil? -%>
    timeout = 60 * int(module.params['timeouts']['delete'].rstrip('m'))
<% end -%>
<% delete_api = object.apis["delete"] -%>
<% 
   r = delete_api.async.nil? ? "" : "r = "
   spaces = delete_api.parameters.nil? ? "" : "    "
-%>

<% unless delete_api.parameters.nil? -%>
    opts = user_input_parameters(module)
    params = build_delete_parameters(opts)
    if params:
<% end -%>
    <%= spaces %><%= r %>send_delete_request(module, <%= delete_api.parameters.nil? ? "None" : "params" %>, client)
<% unless delete_api.async.nil? -%>
    <%= spaces %>async_wait_delete(config, r, client, timeout)
<% else -%>
<%   unless create_api.async.nil? -%>
<%   # if create api is async, then it is best to make sure the resource is delete successfully -%>
<%   end -%>
<% end -%>


<% read_api = object.apis["read"] -%>
def read_resource(config, exclude_output=False):
    module = config.module
    client = config.client(<%= argu_for_sdkclient(read_api) %>)

    res = {}
<% read_apis = [read_api, other_api(object, "r")].flatten.compact -%>
<% read_apis.each do | item | -%>

    r = send_<%= item.out_name%>_request(module, client)
    res["<%= item.name %>"] = r
<% end -%>

    return update_properties(module, res, exclude_output)


def fetch_resource(config):
    module = config.module
    opts = user_input_parameters(module)
    identity = {
<% list_api.identity.each do |k, v| -%>
<%   p = find_property(object, v.split("."))
     unless p.required
       raise "property(#{p.name}) referenced by list identity#{k} must be required"
     end
-%>
        "<%= k %>": navigate_value(opts, [<%= index2navigate(v, true) %>])
<% end -%>
    }

    link = build_path(module, "<%= list_api.path %>")
    if link[-1] != "?":
        link += "?"
<% query_link = build_list_query_params(list_api, 4) -%>
<% unless query_link.empty? -%>

<%=  lines(query_link) -%>
    link += query_link
<% end -%>

<% if list_api.query_params.include?('marker') -%>
    p = {'marker': ''}
    while True:
        url = link % p
        r = send_<%= list_api.out_name %>_request(module, client, url)
        for item in r:
            for k, v in identity.items():
                if item[k] != v:
                    break
            else:
                return item

        p['marker'] = r[-1].get(<%= quote_string(list_api.resource_id_path) -%>)
<% elsif list_api.query_params.include?('offset') -%>
    p = {'offset': 0}
    while True:
        url = link % p
        r = send_<%= list_api.out_name %>_request(module, client, url)
        for item in r:
            for k, v in identity.items():
                if item[k] != v:
                    break
            else:
                return item

        p['offset'] += 1
<% elsif list_api.query_params.include?('start') -%>
    p = {'start': 1}
    while True:
        url = link % p
        r = send_<%= list_api.out_name %>_request(module, client, url)
        for item in r:
            for k, v in identity.items():
                if item[k] != v:
                    break
            else:
                return item

        p['start'] += len(r)
<% else -%>
    r = send_<%= list_api.out_name %>_request(module, client, link)
    for item in v:
        for k, v in identity.items():
        if item[k] != v:
            break
    else:
        return item
<% end -%>
<% create_apis = [create_api, other_api(object, "c")].flatten.compact -%>
<% create_apis.each do | item | -%>
<%   unless item.parameters.nil? -%>


<%= lines(build_request_body_method(object, item)) -%>
<%   end -%>


<%= lines(build_send_request_method(item)) -%>
<%   unless item.async.nil? -%>


<%= lines(build_resource_async_op(item)) -%>
<%   end -%>
<% end -%>
<% if updatable?(object) -%>
<%   update_apis = [update_api, other_api(object, "u")].flatten.compact -%>
<%   update_apis.each do | item | -%>
<%     next if item.is_a?(Api::ApiOther) && item.crud.include?("c") -%>
<%     unless item.parameters.nil? -%>


<%= lines(build_request_body_method(object, item)) -%>
<%     end -%>


<%= lines(build_send_request_method(item)) -%>
<%     unless item.async.nil? -%>


<%= lines(build_resource_async_op(item)) -%>
<%     end -%>
<%   end -%>
<% end -%>
<% unless delete_api.parameters.nil? -%>


<%= lines(build_request_body_method(object, delete_api)) -%>
<% end -%>
<% unless delete_api.async.nil? -%>


    <%= lines(build_resource_async_op(delete_api)) -%>
<% end -%>
<% read_apis.each do | item | -%>


<%= lines(build_read_method(item, false)) -%>
<% end -%>


<%= lines(build_update_properties_method(object)) -%>


<%= lines(build_read_method(list_api, true)) -%>
