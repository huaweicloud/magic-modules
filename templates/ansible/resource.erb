#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2018 Huawei
# GNU General Public License v3.0+ (see COPYING or
# https://www.gnu.org/licenses/gpl-3.0.txt)
<%= lines(autogen_notice :python) -%>

from __future__ import absolute_import, division, print_function
__metaclass__ = type

###############################################################################
# Documentation
###############################################################################

<%
  metadata_version = quote_string(@config.manifest.get('metadata_version',
                                                       config))
  supported_by = quote_string(@config.manifest.get('supported_by', config))
-%>
ANSIBLE_METADATA = {'metadata_version': <%= metadata_version -%>,
                    'status': <%= @config.manifest.get('status', config) -%>,
                    'supported_by': <%= supported_by -%>}

DOCUMENTATION = '''
---
module: <%= module_name(object) %>
description:
<%= lines(indent(bullet_lines(object.description, 4), 4)) -%>
short_description: Creates a Huawei Cloud <%= object.name %>
<%#version_added: <%= lines(@config.manifest.get('version_added', config)) -%>
<%#author: <%= lines(@config.manifest.get('author', config)) -%>
requirements:
<% @config.manifest.get('requirements', config).each do |line| -%>
<%= lines(indent(bullet_line(line, 4, false, false), 4)) -%>
<% end -%>
options:
    state:
        description:
            - Whether the given object should exist in GCP
        choices: ['present', 'absent']
        default: 'present'
<% object.all_user_properties.reject(&:output).each do |prop| -%>
<%= lines(indent(doc_property_yaml(prop, object, 4), 4)) -%>
<% end -%>
'''

<%if example -%>
EXAMPLES = '''
<%#<% res_readable_name = Google::StringUtils.uncombine(object.name) -%>
<% if example.dependencies -%>
<%   example.dependencies.each do |depend| -%>
<%= lines(depend.build_test('present', object, false)) -%>
<%   end # example.dependencies.each -%>
<% end # if example.dependencies -%>
<%= lines(example.task.build_example('present', object)) -%>
'''
<% end -%>

RETURN = '''
<% object.all_user_properties.each do |prop| -%>
<%= lines(indent(return_property_yaml(prop, 4), 4)) -%>
<% end -%>
'''

###############################################################################
# Imports
###############################################################################

<%
  import = 'from ansible.module_utils.hwc_utils import navigate_hash, HwcSession, HwcModule, DictComparison'
  import += ', remove_nones_from_dict'
  import += ', replace_resource_dict' if nonvirtual_rrefs(object)
-%>
<%= lines(import) -%>
import json
<%
  imports = object.imports || []
  imports << 'time' if object.async
  imports << 're'
-%>
<%= lines(imports.sort.uniq.map { |i| "import #{i}" }) -%>

###############################################################################
# Main
###############################################################################


def main():
    """Main function"""

<%
  mod_props = object.all_user_properties.reject(&:output).map do |prop|
    python_dict_for_property(prop, object)
  end
  obj_update_url = 'self_link(module)'
  obj_delete_url = 'self_link(module)'
  if object.update_url && object.delete_url && object.update_url == object.delete_url
    obj_update_url = 'update_delete_url(module)'
    obj_delete_url = 'update_delete_url(module)'
  else
    if object.update_url
      obj_update_url = 'update_url(module)'
    end
    if object.delete_url
      obj_delete_url = 'delete_url(module)'
    end
  end
-%>
    module = HwcModule(
        argument_spec=dict(
            state=dict(default='present', choices=['present', 'absent'], type='str'),
<%= lines(indent_list(mod_props, 12)) -%>
        )
    )

    state = module.params['state']
<% if object.kind? -%>
    kind = <%= lines(quote_string(object.kind)) -%>
<% end -%>
<% if object.msg_prefix -%>
    msg_prefix = <%= quote_string(object.msg_prefix) %>
<% end  # object.msg_prefix -%>

<% if object.self_link_query.nil? -%>
<%
  method = method_call('fetch_resource', ['module', 'link',
                                          ('kind' if object.kind?),
					  ('[' + object.get_codes.join(', ') + ']' if object.get_codes)
                                         ])
-%>
<% if self_link_url(object).match('/{id}') -%>
    if (not module.params.get("id")) and module.params.get("name"):
        module.params['id'] = get_id_by_name(module)

<% end -%>
    fetch = None
    link = self_link(module)
    # the link will include Nones if required format parameters are missed
    if not re.search('/None/|/None$', link):
        fetch = <%= method %>
<% else # object.self_link_query.nil? -%>
    fetch = fetch_wrapped_resource(module, '<%= object.kind -%>',
                                   '<%= object.self_link_query.kind -%>',
                                   '<%= object.self_link_query.items -%>')
<% end # object.self_link_query.nil? -%>
    changed = False
<% if object.virtual -%>
    if not fetch:
        module.fail_json(msg="<%= object.name -%> is not valid")
<% else # object.virtual -%>

    if fetch:
<% if object.msg_prefix -%>
        fetch = fetch.get(msg_prefix)
<% end  # object.msg_prefix -%>

        if state == 'present':
            if is_different(module, fetch):
<%
  method = method_call('update', [
                                   'module', obj_update_url,
                                   ('kind' if object.kind?),
                                   ('fetch' if object.save_api_results?),
                                   ('[' + object.update_codes.join(', ') + ']' if object.update_codes)
                                 ])
-%>
<%= lines(indent("fetch = #{method}", 16)) -%>
<% if object.msg_prefix -%>
                fetch = fetch.get(msg_prefix)
<% end  # object.msg_prefix -%>
                changed = True
            fetch = response_to_hash(module, fetch)
        else:
<%
  method = method_call('delete', [
                                   'module', obj_delete_url,
                                   ('kind' if object.kind?),
				   ('fetch' if object.save_api_results?),
				   ('[' + object.delete_codes.join(', ') + ']' if object.delete_codes)
                                 ])
-%>
<%= lines(indent(method, 12)) -%>
            fetch = {}
            changed = True
    else:
        if state == 'present':
<%
  if object.create_verb.nil? || object.create_verb == :POST
    create_link = 'collection(module)'
  elsif object.create_verb == :PUT
    create_link = 'self_link(module)'
  else
    raise "Ansible does not support create_verb #{object.create_verb}"
  end
  method = method_call('create', ['module', create_link,
				  ('kind' if object.kind?),
				  ('[' + object.create_codes.join(', ') + ']' if object.create_codes)])
-%>
            fetch = <%= method %>
            fetch = response_to_hash(module, <%= object.msg_prefix ? 'fetch.get(msg_prefix)' : 'fetch'%>)
            changed = True
        else:
            fetch = {}

    fetch.update({'changed': changed})
<% end # object.virtual -%>

    module.exit_json(**fetch)


<% prod_name = object.__product.prefix[1..-1] -%>
<% unless object.virtual -%>
<%# TODO: kind param not always needed.
  # https://github.com/GoogleCloudPlatform/magic-modules/issues/45
-%>
<%= method_decl('create', ['module', 'link', ('kind' if object.kind?), 'success_codes=None']) %>
<% if object.create.nil? -%>
    auth = HwcSession(module, <%= quote_string(prod_name) -%>)
    if not success_codes:
        success_codes = [201, 202]
<%
  if object.create_verb.nil? || object.create_verb == :POST
    create_verb = '.post'
  elsif object.create_verb == :PUT
    create_verb = '.put'
  else
    raise "Ansible does not support create_verb #{object.create_verb}"
  end
-%>
<%
  method = method_call(
    'return_if_object',
    ['module',
     method_call("auth#{create_verb}",
                 ['link', 'resource_to_create(module)']),
     ('kind' if !object.async && object.kind?),
     'success_codes'
   ]
  )
-%>
<%   if not object.async -%>
    return <%= method %>
<%   else -%>
    r = <%= method %>

    wait_done = wait_for_operation(module, 'create', r)

    url = resource_get_url(module, wait_done)
<%
  method = method_call('fetch_resource', ['module', 'url',
                                          ('kind' if object.kind?),
					  ('[' + object.get_codes.join(', ') + ']' if object.get_codes)
                                         ])
-%>
    return <%= method %>
<%   end -%>
<% else -%>
<%= lines(indent(object.create, 4)) -%>
<% end -%>


<%=
  lines(method_decl('update', ['module', 'link', ('kind' if object.kind?),
			       ('fetch' if object.save_api_results?),
			       'success_codes=None']))
-%>
<% if object.update.nil? -%>
<%   if !false?(object.editable) -%>
    auth = HwcSession(module, <%= quote_string(prod_name) -%>)
    if not success_codes:
        success_codes = [201, 202]
<%
  method = method_call(
    'return_if_object',
    [
     'module',
     method_call("auth.put", ['link', 'resource_to_update(module)']),
     ('kind' if !object.async && object.kind?),
     'success_codes'
   ]
  )
-%>
<%   if not object.async -%>
    return <%= method %>
<%   else -%>
    r = <%= method %>

    wait_done = wait_for_operation(module, 'update', r)

    url = resource_get_url(module, wait_done)
<%
  method = method_call('fetch_resource', ['module', 'url',
                                          ('kind' if object.kind?),
					  ('[' + object.get_codes.join(', ') + ']' if object.get_codes)
                                         ])
-%>
    return <%= method %>
<%     end -%>
<%   else # !false?(object.editable) -%>
    module.fail_json(msg="<%= object.name -%> cannot be edited")
<%   end # !false?(object.editable) -%>
<% else # object.update.nil? -%>
<%= lines(indent(object.update, 4)) -%>
<% end # object.update.nil? -%>


<%=
  lines(method_decl('delete', ['module', 'link', ('kind' if object.kind?),
			       ('fetch' if object.save_api_results?),
			       'success_codes=None']))
-%>
<% if object.delete.nil? -%>
    auth = HwcSession(module, <%= quote_string(prod_name) -%>)
    if not success_codes:
        success_codes = [202, 204]
<%
  method = method_call(
    'return_if_object',
    ['module',
     method_call("auth.delete", ['link']),
     ('kind' if !object.async && object.kind?),
     'success_codes',
     'False'
   ]
  )

  method1 = method_call(
    'return_if_object',
    ['module',
     method_call("auth.delete", ['link']),
     ('kind' if !object.async && object.kind?),
     'success_codes'
   ]
  )
-%>
<%   if not object.async -%>
    <%= method %>
<%   else -%>
<%
  async_op_st = object.async.operation.service_type
  async_op_url = object.async.operation.base_url.gsub(/{.*}/, ' ')
  object_self_link = self_link_url(object).gsub(/{.*}/, ' ')
-%>
<%     if (not async_op_st || async_op_st == object.service_type) && async_op_url == object_self_link -%>
    <%= method %>

    wait_for_delete(module, link)
<%     else -%>
    r = <%= method1 %>

    wait_for_operation(module, 'delete', r)
<%     end -%>
<%   end -%>
<% else # if object.delete.nil? -%>
<%= lines(indent(object.delete, 4)) -%>
<% end # if object.delete.nil? -%>


<% end # unless object.virtual -%>
<%= lines(compile('templates/ansible/transport.erb'), 2) -%>
<% unless object.virtual || self_link_url(object).match('/{id}').nil? -%>
def get_id_by_name(module):
    name = module.params.get("name")
    link = list_link(module, {'limit': 10, 'marker': '{marker}'})
    not_format_keys = re.findall("={marker}", link)
    none_values = re.findall("=None", link)

    if not (not_format_keys or none_values):
        r = fetch_resource(module, link)
        if r is None:
            return ""
<%   if object.list_msg_prefix -%>
        r = r.get(<%= quote_string(object.list_msg_prefix) %>, [])
<%   end  # object.msg_prefix -%>
        ids = [
            i.get('id') for i in r if i.get('name', '') == name
        ]
        if not ids:
            return ""
        elif len(ids) == 1:
            return ids[0]
        else:
            module.fail_json(msg="Multiple resources with same name are found")
    elif none_values:
        module.fail_json(msg="Can not find id by name because url includes None")
    else:
        p = {'marker': ''}
        ids = set()
        while True:
            r = fetch_resource(module, link.format(**p))
            if r is None:
                break
<%   if object.list_msg_prefix -%>
            r = r.get(<%= quote_string(object.list_msg_prefix) %>, [])
<%   end  # object.msg_prefix -%>
            if r == []:
                break
            for i in r:
                if i.get('name') == name:
                    ids.add(i.get('id'))
            if len(ids) >= 2:
                module.fail_json(msg="Multiple resources with same name are found")

            p['marker'] = r[-1].get('id')

        return ids.pop() if ids else ""


<%= lines(emit_link('list_link', list_url(object), object, true, object.service_type)) -%>


<% end -%>
<%= lines(emit_link('self_link', self_link_url(object), object, false, object.service_type)) -%>


<%= lines(emit_link('collection', collection_url(object), object, false, object.service_type)) -%>


<%
  if object.update_url && object.delete_url && object.update_url == object.delete_url
    tmp_url = object.update_url.gsub('{{', '{').gsub('}}', '}')
-%>
<%=
    lines(emit_link('update_delete_url', tmp_url, object, false, object.service_type))
-%>


<%
  else
    if object.update_url
      tmp_url = object.update_url.gsub('{{', '{').gsub('}}', '}')
-%>
<%=
      lines(emit_link('update_url', tmp_url, object, false, object.service_type))
-%>


<%
    end
    if object.delete_url
      tmp_url = object.delete_url.gsub('{{', '{').gsub('}}', '}')
-%>
<%=
      lines(emit_link('delete_url', tmp_url, object, false, object.service_type))
-%>


<%
    end
  end
-%>
def get_service_endpoint(module, service_type):
    auth = HwcSession(module, <%= quote_string(prod_name) -%>)
    return auth.get_service_endpoint(service_type)


<% if object.base_url.include? "{project}" -%>
def get_project_id(module):
    auth = HwcSession(module, <%= quote_string(prod_name) -%>)
    return auth.get_project_id()


<% end -%>
<%=
  lines(method_decl('return_if_object', ['module', 'response',
					 ('kind' if object.kind?),
					 'success_codes', 'has_content=True']))
-%>
    code = response.status_code

    # If not found, return nothing.
    if code == 404:
        return None

    # If no content, return nothing.
    if code in success_codes and not has_content:
        return None

    result = None
    try:
        result = response.json()
    except getattr(json.decoder, 'JSONDecodeError', ValueError) as inst:
        module.fail_json(msg="Invalid JSON response with error: %s" % inst)

<% if object.decoder? -%>
    result = <%= object.transport.decoder -%>(result, module)

<% end -%>
    if code not in success_codes:
        msg = navigate_hash(result, ['message'])
        if msg:
            module.fail_json(msg=msg)
        else:
            module.fail_json(msg="operation failed, return code=%d" % code)
<% if object.kind? -%>
    if result['kind'] != kind:
        module.fail_json(msg="Incorrect result: {kind}".format(**result))
<% end # object.kind? -%>

    return result


def is_different(module, response):
    request = _get_editable_properties(module)
    response = response_to_hash(module, response)

    # Remove all output-only from response.
    response_vals = {}
    for k, v in response.items():
        if k in request:
            response_vals[k] = v

    request_vals = {}
    for k, v in request.items():
        if k in response:
            request_vals[k] = v

    return DictComparison(request_vals) != DictComparison(response_vals)


def resource_to_create(module):
<%
  properties_in_request = [
    object&.parameters&.reject(&:alone_parameter)&.select { |p| p.input || p.create_update == 'c' || p.create_update == 'cu' },
    object.properties.reject(&:output).select { |p| p.create_update == 'c' || p.create_update == 'cu' },
  ].flatten.compact
-%>
    request = remove_nones_from_dict({
<% if object.kind? -%>
        u'kind': <%= quote_string(object.kind) -%>,
<% end # if object.kind? -%>
<%= lines(indent(request_properties(properties_in_request), 4)) -%>
    })
<%
  alone = object.alone_parameters.select { |p| p.input || p.create_update == 'c' || p.create_update == 'cu' }
-%>
<% if not alone.empty? -%>
    alone_param = remove_nones_from_dict({
 <%= lines(indent(request_properties(alone), 4)) -%>
    })
<% end -%>
<% if object.msg_prefix -%>
<%   if alone.empty? -%>
    return {'<%= object.msg_prefix %>': request}
<%   else -%>
    v = {'<%= object.msg_prefix %>': request}
    v.update(alone_param)
    return v
<%   end -%>
<% else -%>
<%   if alone.empty? -%>
    return request
<%   else -%>
    return request.update(alone_param)
<%   end -%>
<% end -%>


def resource_to_update(module):
<%
  properties_in_request = [
    object&.parameters&.reject(&:alone_parameter)&.select { |p| p.create_update == 'u' || p.create_update == 'cu' },
    object.properties.reject(&:output).select { |p| p.create_update == 'u' || p.create_update == 'cu' },
  ].flatten.compact
-%>
    request = remove_nones_from_dict({
<% if object.kind? -%>
        u'kind': <%= quote_string(object.kind) -%>,
<% end # if object.kind? -%>
<%= lines(indent(request_properties(properties_in_request), 4)) -%>
    })
<%
  alone = object.alone_parameters.select { |p| p.create_update == 'u' || p.create_update == 'cu' }
-%>
<% if not alone.empty? -%>
    alone_param = remove_nones_from_dict({
 <%= lines(indent(request_properties(alone), 4)) -%>
    })
<% end -%>
<% if object.msg_prefix -%>
<%   if alone.empty? -%>
    return {'<%= object.msg_prefix %>': request}
<%   else -%>
    v = {'<%= object.msg_prefix %>': request}
    v.update(alone_param)
    return v
<%   end -%>
<% else -%>
<%   if alone.empty? -%>
    return request
<%   else -%>
    return request.update(alone_param)
<%   end -%>
<% end -%>


def _get_editable_properties(module):
<%
  ps = object.properties.reject(&:output).select { |p| p.create_update == 'u' || p.create_update == 'cu' }
-%>
    request = remove_nones_from_dict({
<% ps.map do |p| -%>
<%= indent("\"#{p.out_name}\": module.params.get(\"#{p.out_name}\"),", 8)-%>
<%= "\n" -%>
<% end -%>
    })

    return request


# Remove unnecessary properties from the response.
# This is for doing comparisons with Ansible's current parameters.
def response_to_hash(module, response):
    return {
<%= lines(response_properties(object.properties)) -%>
    }
<%= lines_before(selflink_functions(object), 1) -%>
<%= lines_before(compile('templates/ansible/async.erb'), 1) -%>
<%= lines_before(compile('templates/ansible/provider_helpers.erb'), 1) -%>
<%= lines_before(compile('templates/ansible/properties.erb'), 1) -%>


if __name__ == '__main__':
    main()
