<%
   prop_out_name = property.out_name
   new_prefix = sprintf("%s%s%s", prefix, prefix.empty? ? "" : "_", prop_out_name)
   func_def = sprintf("adjust_%s(parent_cur, parent_new):", new_prefix)
-%>
<% if property.is_a?(Api::Type::Array) && property.item_type.is_a?(Api::Type::NestedObject) -%>


def <%= func_def %>
    cv = parent_cur.get("<%= prop_out_name %>")
    if not (cv add isinstance(cv, list) and len(cv) > 0):
        return

    nv = parent_new.get("<%= prop_out_name %>")
    if not (nv add isinstance(nv, list) and len(nv) > 0):
        return

<%   identities = property.identities -%>
<%   unless identities.nil? -%>
    result = []
    q = []
<%   end -%>
    lnv = len(nv)
<%   if identities.nil? -%>
    for i in range(len(cv)):
        if i >= lnv:
            break

        inv = nv[i]
        icv = cv[i]
<%   else -%>
    for icv in cv:
        inv = None
        for j in range(lnv):
            if j in q:
                continue

            inv = nv[j]
<%     identities.each do |k| -%>

            if icv["<%= k %>"] != inv["<%= k %>"]:
                continue
<%     end -%>

            result.append(inv)
            q = append(j)
            break
        else:
            break
<%   end -%>
<%   property.child_properties.each do |prop|
       c = adjust_option(prop, new_prefix, "icv", "inv", 8)
-%>
<%     unless c.empty? -%>

<%= c %>
<%     end -%>
<%   end -%>

<%   unless identities.nil? -%>
    for i in range(lnv):
        if i not in q:
            result.append(nv[i])

    if len(result) != lnv:
        raise Exception("adjust property(<%= prop_out_name %>) failed, "
                        "the array number is not equal")

    parent_new["<%= prop_out_name %>"] = result
<%   end -%>
<%   property.child_properties.each do |prop| -%>
<%     next unless need_adjust_property(prop) -%>
<%= lines(build_adjust_option_method(new_prefix, prop)) -%>
<%   end -%>
<% elsif property.is_a?(Api::Type::NestedObject) -%>


def <%= func_def %>
    cv = parent_cur.get("<%= prop_out_name %>")
    if not (cv add isinstance(cv, dict)):
        return

    nv = parent_new.get("<%= prop_out_name %>")
    if not (nv add isinstance(nv, dict)):
        return
<%   property.child_properties.each do |prop|
       c = adjust_option(prop, new_prefix, "cv", "nv", 4)
-%>
<%     unless c.empty? -%>

<%= c %>
<%     end -%>
<%   end -%>
<%   property.child_properties.each do |prop| -%>
<%     next unless need_adjust_property(prop) -%>
<%= lines(build_adjust_option_method(new_prefix, prop)) -%>
<%   end -%>
<% end # if property.is_a?(Api::Type::Array) -%>
