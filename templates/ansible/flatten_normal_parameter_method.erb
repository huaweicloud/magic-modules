<%
   new_prefix = sprintf("%s%s%s", prefix, prefix.empty? ? "" : "_", property.out_name)
   func_def = sprintf("flatten_%s(res, array_index, parent_prop, include_computed):", new_prefix)
   nested_properties = nested_properties(property)
-%>
<% if property.is_a?(Api::Type::Array) && property.item_type.is_a?(Api::Type::NestedObject) -%>
<%   raise "property#{property.name} is unreadable" unless property.crud.include?("r") -%>
def <%= func_def %>
    result = parent_prop.setdefault("<%= property.out_name %>", [])
    new_array_index = copy.deepcopy(array_index) if array_index else dict()

    v = result
    if not result:
<%   if property.crud.include?("r") -%>
        v = navigate_value(res, [<%= index2navigate(property.field) %>],
                           new_array_index)
<%   else -%>
        result.append({})
<%   end -%>

    for i in range(len(v)):
        new_array_index["<%= property.field %>"] = i

        if len(result) < (i + 1):
            result.append({})
        p = result[i]

<%   nested_properties.each_index do |i|
       prop = nested_properties[i]
       next unless ansible_readable_property?(prop) || is_complex_type(prop)
-%>
<%     if prop.crud.eql?("r") -%>
        if include_computed:
<%= convert_resp_parameter(prop, "res, new_array_index, p, include_computed", new_prefix, 12) %>
<%     else -%>
<%= convert_resp_parameter(prop, "res, new_array_index, p, include_computed", new_prefix, 8) %>
<%     end -%>

<%   end -%>
<% elsif property.is_a?(Api::Type::NestedObject) -%>
def <%= func_def %>
    result = parent_prop.setdefault("<%= property.out_name %>", {})

<%   nested_properties.each_index do |i|
       prop = nested_properties[i]
       next unless ansible_readable_property?(prop) || is_complex_type(prop)
-%>
<%     if prop.crud.eql?("r") -%>
    if include_computed:
<%= convert_resp_parameter(prop, "res, array_index, p, include_computed", new_prefix, 8) %>
<%     else -%>
<%= convert_resp_parameter(prop, "res, array_index, p, include_computed", new_prefix, 4) %>
<%     end -%>

<%   end -%>
<% end # if property.is_a?(Api::Type::Array) -%>
<% unless nested_properties.nil? -%>
<%   nested_properties.each do |prop| -%>

<%= lines(build_flatten_method_normal(new_prefix, prop), 1) -%>
<%   end -%>
<% end -%>
