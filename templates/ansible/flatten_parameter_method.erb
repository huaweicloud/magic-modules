<%
   new_prefix = sprintf("%s%s%s", prefix, prefix.empty? ? "" : "_", property.out_name)
   func_def = sprintf("flatten_%s(res, array_index, current_value, exclude_output):", new_prefix)
-%>
<% if !property.from_response.nil? -%>
def <%= func_def -%>
    v = navigate_value(res, [<%= index2navigate(property.field) %>], array_index)
    <%= lines(property.from_response) -%>
    return v
}
<% elsif property.is_a?(Api::Type::Array) && property.item_type.is_a?(Api::Type::NestedObject) -%>
def <%= func_def %>
    n = 0
    result = current_value
    if result:
        n = len(result)
    else:
<%   if property.crud.include?("r") -%>
        v = navigate_value(res, [<%= index2navigate(property.field) %>],
                           new_array_index)
        n = len(v)
<%   else -%>
        n = 1
<%   end -%>
        result = []

    new_array_index = copy.deepcopy(array_index) if array_index else dict()

    for i in range(n):
        new_array_index["<%= property.field %>"] = i

        if len(result) < (i + 1):
            result.append({})
<%   nested_properties = nested_properties(property) -%>
<%   nested_properties.each do |prop| -%>
<%     c = convert_resp_parameter(prop, "res, new_array_index", new_prefix, "result[i]", 8) -%>
<%     unless c.empty? -%>

<%= c %>
<%     end -%>
<%   end -%>

    return result
<%   nested_properties.each do |prop| -%>
<%     next unless has_output_property(prop) -%>

<%= lines(build_flatten_method(new_prefix, prop), 1) -%>
<%   end -%>
<% elsif property.is_a?(Api::Type::NestedObject) -%>
def <%= func_def %>
    result = current_value
    if not result:
        result = {}
<%   nested_properties = nested_properties(property) -%>
<%   nested_properties.each do |prop| -%>
<%     c = convert_resp_parameter(prop, "res, array_index", new_prefix, "result", 4) -%>
<%     unless c.empty? -%>

<%= c %>
<%     end -%>
<%   end -%>

    return result
<%   nested_properties.each do |prop| -%>
<%     next unless has_output_property(prop) -%>

<%= lines(build_flatten_method(new_prefix, prop), 1) -%>
<%   end -%>
<% end # if property.is_a?(Api::Type::Array) -%>
