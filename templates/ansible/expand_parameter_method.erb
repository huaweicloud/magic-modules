<%
   new_prefix = sprintf("%s_%s", prefix, property.out_name)
   func_def = sprintf("expand_%s(d, array_index):", new_prefix)
-%>
<% if !property.to_request.nil? -%>


def <%= func_def %>
<%= indent(lines(property.to_request, -1), 4) -%>
<% elsif property.is_a?(Api::Type::Array) && property.item_type.is_a?(Api::Type::NestedObject) -%>


def <%= func_def %>
    new_array_index = copy.deepcopy(array_index) if array_index else dict()

    req = []

<%   if property.array_num.nil? -%>
<%     rp = find_property(resource, property.field.split("."))
       unless rp.is_a?(Api::Type::Array)
         raise "parameter(#{property.name}) is an array, but the matched property is not"
       end
-%>
    v = navigate_value(d, [<%= index2navigate(property.field, true) %>],
                       new_array_index)
    n = len(v) if v else 1<%# v may be None %>
<%   else -%>
    n = <%= property.array_num %>
<%   end -%>
    for i in range(n):
<%   unless property.field.nil? -%>
        new_array_index["<%= to_schema_index(property.field) %>"] = i
<%   end -%>
        transformed = dict()

<%   nested_properties = nested_properties(property) -%>
<%= indent(lines(build_expand_properties(nested_properties, "d, new_array_index", new_prefix, "transformed")), 4) %>

        if transformed:
            req.append(transformed)

    return req
<%   nested_properties.each do |prop| -%>
<%= lines(build_expand_method(resource, new_prefix, prop)) -%>
<%   end -%>
<% elsif property.is_a?(Api::Type::NestedObject) -%>


def <%= func_def %>
    r = dict()

<%   nested_properties = nested_properties(property) -%>
<%= lines(build_expand_properties(nested_properties, "d, array_index", new_prefix, "r")) -%>

    return r
<%   nested_properties.each do |prop| -%>
<%= lines(build_expand_method(resource, new_prefix, prop)) -%>
<%   end -%>
<% end -%>
