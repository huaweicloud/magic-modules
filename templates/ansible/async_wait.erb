func async_wait(config, result, client, timeout):
<%
   async = api.async
   async_op = async.operation
   url_v = "url"
-%>
<% if need_build_async_url(api) %>
<%   if async_op.path_parameter -%>
    path_parameters = {
<%     async_op.path_parameter.each do |k, v| -%>
<%=      sprintf("\"%s\": [%s],", k, index2navigate(v))  %>
<%     end -%>
    }

    data = {
        key : navigate_value(result, path)
        for key, path in path_parameters.items()
    }

    url = build_path(config.module, "<%= async_op.path -%>", data)
<%   elsif async_op.path.include?("{") -%>
    url = build_path(config.module, "<%= async_op.path -%>")
<%   else -%>
<%     url_v = sprintf("\"%s\"", async_op.path) -%>
<%   end -%>
<% end -%>
<% cl = "client" -%>
<% if need_build_async_client(api) -%>

    async_client = config.client(<%= argu_for_sdkclient(async.operation) %>)
<%   cl = "async_client" -%>
<% end -%>

<% status_check = async.status_check -%>
<% if status_check -%>

    def _query_status():
        r = <%= cl %>.get(url, None, {"Content-Type": "application/json"})
        status = navigate_value(r, [<%= index2navigate(status_check.field) %>])
        return r, status

    return wait_to_finish(
        [<%= status_check.complete.compact.map { |x| "\"#{x}\"" }.join(", ") %>],
        [<%= status_check.pending.compact.map { |x| "\"#{x}\"" }.join(", ") %>, "Pending"],
        timeout,
        <%= sprintf('%d', async.operation.wait_ms / 1000) %> * time.Second,
        _query_status,
    )
<% elsif async.custom_status_check_func -%>

    def _query_status():
        r = <%= cl %>.get(url, None, {"Content-Type": "application/json"})
	status = "Done" if <%= async.custom_status_check_func %>(r) else "Pending"
        return r, status
    }

    return wait_to_finish(
        ["Done"], ["Pending"],
        timeout,
        <%= sprintf('%d', async.operation.wait_ms / 1000) %> * time.Second,
        _query_status,
    )
<% else -%>
<%   raise "Must sepecify status check for api: #{api.name}" -%>
<% end -%>
