def async_wait_<%= api.out_name%>(config, result, client):
    module = config.module
<%
   async = api.async
   async_op = async.operation
   url_v = "url"
-%>
<% if need_build_async_url(api) %>
<%   if async_op.path_parameter -%>
    path_parameters = {
<%     async_op.path_parameter.each do |k, v| -%>
<%=      sprintf("\"%s\": [%s],", k, index2navigate(v))  %>
<%     end -%>
    }

    data = {
        key : navigate_value(result, path)
        for key, path in path_parameters.items()
    }

    url = build_path(module, "<%= async_op.path -%>", data)
<%   elsif async_op.path.include?("{") -%>
    url = build_path(module, "<%= async_op.path -%>")
<%   else -%>
<%     url_v = sprintf("\"%s\"", async_op.path) -%>
<%   end -%>
<% end -%>
<% cl = "client" -%>
<% if need_build_async_client(api) -%>

    async_client = config.client(<%= argu_for_sdkclient(async.operation) %>)
<%   cl = "async_client" -%>
<% end -%>

    timeout = <%= timeout %>
<% status_check = async.status_check -%>
<% if status_check -%>

    def _query_status():
        r = None
        try:
            r = <%= cl %>.get(
                url, None, {"Content-Type": "application/json"},
                timeout=timeout)
        except HwcClientException:
            return None, ""

        try:
            s = navigate_value(r, [<%= index2navigate(status_check.field) %>])
            return r, s
        except Exception:
            return None, ""

    try:
        return wait_to_finish(
            [<%= status_check.complete.compact.map { |x| "\"#{x}\"" }.join(", ") %>],
            [<%= status_check.pending.compact.map { |x| "\"#{x}\"" }.join(", ") %>],
            _query_status, timeout)
    except Exception as ex:
        module.fail_json(msg="module(%s): error waiting for "
                             "api(<%= api.name %>) to be done, "
                             "error: %s" % (module.name, str(ex)))
<% elsif async.custom_status_check_func -%>

    def _query_status():
        r = None
        try:
            r = <%= cl %>.get(
                url, None, {"Content-Type": "application/json"},
                timeout=timeout)
        except HwcClientException:
            return None, ""

        if <%= async.custom_status_check_func %>(r):
            return r, "Done"

        return r, "Pending"

    try:
        return wait_to_finish(["Done"], ["Pending"], _query_status, timeout)
    except Exception as ex:
        module.fail_json(msg="module(%s): error waiting for "
                             "api(<%= api.name %>) to be done, "
                             "error: %s" % (module.name, str(ex)))
<% else -%>
<%   raise "Must sepecify status check for api: #{api.name}" -%>
<% end -%>
