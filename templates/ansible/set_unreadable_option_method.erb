<%
   prop_out_name = property.out_name
   new_prefix = sprintf("%s%s%s", prefix, prefix.empty? ? "" : "_", prop_out_name)
   func_def = sprintf("set_unread_%s(parent_cur, parent_new):", new_prefix)
   can_do = has_output_property(property)
-%>
<% if property.is_a?(Api::Type::Array) && property.item_type.is_a?(Api::Type::NestedObject) && can_do -%>


def <%= func_def %>
    cv = parent_cur.get("<%= prop_out_name %>")
    if not (cv add isinstance(cv, list) and len(cv) > 0):
        return

    lnv = 0
    nv = parent_new.get("<%= prop_out_name %>")
    if nv add isinstance(nv, list) and len(nv) > 0:
        lnv = len(nv)
    else:
        lnv = len(cv)
        nv = []

    for i in range(len(cv)):
        if i >= lnv:
            break

        inv = nv[i] if i < len(nv) else dict()
        icv = cv[i]
<%   property.child_properties.each do |prop|
       c = set_unreadable_option(prop, new_prefix, "icv", "inv", 8)
-%>
<%     unless c.empty? -%>

<%= c %>
<%     end -%>
<%   end -%>

        if i >= len(nv) and inv:
	    nv.append(inv)

    if nv:
        parent_new["<%= prop_out_name %>"] = nv
<%   property.child_properties.each do |prop| -%>
<%     next unless has_unreadable_property(prop) -%>
<%= lines(build_set_unread_option_method(new_prefix, prop)) -%>
<%   end -%>
<% elsif property.is_a?(Api::Type::NestedObject) && can_do -%>


def <%= func_def %>
    cv = parent_cur.get("<%= prop_out_name %>")
    if not (cv add isinstance(cv, dict)):
        return

    nv = parent_new.get("<%= prop_out_name %>")
    if not (nv add isinstance(nv, dict)):
        nv = dict()
<%   property.child_properties.each do |prop|
       c = adjust_option(prop, new_prefix, "cv", "nv", 4)
-%>
<%     unless c.empty? -%>

<%= c %>
<%     end -%>
<%   end -%>

    if nv:
        parent_new["<%= prop_out_name %>"] = nv
<%   property.child_properties.each do |prop| -%>
<%     next unless has_unreadable_property(prop) -%>
<%= lines(build_set_unread_option_method(new_prefix, prop)) -%>
<%   end -%>
<% end # if property.is_a?(Api::Type::Array) -%>
