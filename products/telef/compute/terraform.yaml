# Copyright 2018 Huawei Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

--- !ruby/object:Provider::Terraform::Config
overrides: !ruby/object:Provider::ResourceOverrides
  ASConfig: !ruby/object:Provider::Terraform::ResourceOverride
    examples:
      - !ruby/object:Provider::Terraform::Example
        name: "as_config_basic"
        primary_resource_id: "config"
        is_basic: true
    properties:
      config.public_ip: !ruby/object:Provider::Terraform::PropertyOverride
        to_request: |
          val, err := {class}(v)
          if err != nil {
              return nil, err
          }
          return map[string]interface{}{"eip": val}, nil
        from_response: |
          v1, ok := v.(map[string]interface{})
          if !ok {
              return nil, fmt.Errorf("can not read public_ip")
          }
          return {class}(v1)
  ASGroup: !ruby/object:Provider::Terraform::ResourceOverride
    custom_code: !ruby/object:Provider::Terraform::CustomCode
      async_create_complete: |
        func (v interface{}) bool {
            c, err1 := navigateMap(v, []string{"scaling_group", "current_instance_number"})
            d, err2 := navigateMap(v, []string{"scaling_group", "desire_instance_number"})
            return err1 == nil && err2 == nil && c.(int) == d.(int)
        }
      async_update_complete: |
        func (v interface{}) bool {
            c, err1 := navigateMap(v, []string{"scaling_group", "current_instance_number"})
            d, err2 := navigateMap(v, []string{"scaling_group", "desire_instance_number"})
            return err1 == nil && err2 == nil && c.(int) == d.(int)
        }
# This is where custom code would be defined eventually.
examples: !ruby/object:Api::Resource::HashArray
files: !ruby/object:Provider::Config::Files
  copy:
  compile:
tests: !ruby/object:Api::Resource::HashArray
# This would be for custom network responses. Tests work by running some block
# of autogenerated Chef/Puppet code and then verifying the network calls.
# The network call verifications are automatically generated, but can be
# overriden.
test_data: !ruby/object:Provider::Config::TestData
